import os
import uuid
import binascii
from copy import deepcopy

from api import db
from api.models import base, enum, PaymentSystem

__author__ = 'Kostel Serhii'


def _generate_sign_key(bytes_size=160):
    """
    Generate random value for sign key.
    Generated bytes represented as string: two char for one byte.
    :param bytes_size: number of bytes in
    :return: str representation of random bytes len=2*bytes_size
    """
    return binascii.hexlify(os.urandom(bytes_size)).decode()


class StoreSettings(base.BaseModel):

    __tablename__ = 'store_settings'

    id = db.Column(db.Integer, primary_key=True)
    sign_algorithm = db.Column(db.Enum(*enum.SIGN_ALGORITHM_ENUM, name='enum_sign_algorithm'),
                               default='MD5', nullable=False)
    sign_key = db.Column(db.String(512), nullable=False, default=_generate_sign_key)
    succeed_url = db.Column(db.String(255), nullable=False)
    failure_url = db.Column(db.String(255), nullable=False)
    commission_pct = db.Column(db.Numeric, nullable=False)

    store_id = db.Column(db.String, db.ForeignKey('store.id', ondelete='CASCADE'), nullable=False)

    def __init__(self, sign_algorithm, succeed_url, failure_url, commission_pct):
        self.sign_algorithm = sign_algorithm
        self.succeed_url = succeed_url
        self.failure_url = failure_url
        self.commission_pct = commission_pct

    def __repr__(self):
        return '<StoreSettings %r>' % self.id


class Store(base.BaseModel):

    __tablename__ = 'store'

    id = db.Column(db.String, primary_key=True, default=lambda: str(uuid.uuid4()))
    store_name = db.Column(db.String(32), nullable=False)
    store_url = db.Column(db.String(255), nullable=False)

    category = db.Column(db.Enum(*enum.STORE_CATEGORY_ENUM, name='enum_store_category'))
    description = db.Column(db.String(512))
    logo = db.Column(db.String(255))
    show_logo = db.Column(db.Boolean, default=False)

    store_settings = db.relationship('StoreSettings', backref='store', uselist=False, lazy='joined')

    merchant_id = db.Column(db.String, db.ForeignKey('merchant.id', ondelete='CASCADE'), nullable=False)

    def __init__(self, store_name, store_url, store_settings, merchant_id,
                 category=None, description=None, logo=None, show_logo=False):
        self.store_name = store_name
        self.store_url = store_url
        self.category = category
        self.description = description
        self.logo = logo
        self.show_logo = show_logo
        self.store_settings = store_settings
        self.merchant_id = merchant_id

    def __repr__(self):
        return '<Store %r>' % self.store_name

    @classmethod
    def create(cls, data, add_to_db=True):
        data = deepcopy(data)

        store_settings_data = data.pop('store_settings', {})
        data['store_settings'] = StoreSettings.create(store_settings_data)

        store = super(Store, cls).create(data)
        return store

    def update(self, data, add_to_db=True):
        data = deepcopy(data)

        store_settings_data = data.pop('store_settings', {})
        self.store_settings.update(store_settings_data)

        super(Store, self).update(data)


class StorePaySys(base.BaseModel):

    __tablename__ = 'store_paysys'

    id = db.Column(db.String, primary_key=True, default=lambda: str(uuid.uuid4()))
    store_id = db.Column(db.String, db.ForeignKey('store.id', ondelete='CASCADE'), nullable=False)
    paysys_id = db.Column(db.String, db.ForeignKey('payment_systems.id', ondelete='CASCADE'), nullable=False)
    allowed = db.Column(db.Boolean, default=False)
    # unique together
    __table_args__ = (db.UniqueConstraint('store_id', 'paysys_id', name='_store_paysys_unique'),)

    def __init__(self, store_id, paysys_id, allowed=False):
        self.store_id = store_id
        self.paysys_id = paysys_id
        self.allowed = allowed

    def __repr__(self):
        return '<Store Payment System %r>' % self.id


# TODO: remove logo file when Store removed

@base.on_model_event(Store, 'before_insert')
def create_store_paysys(store):
    """ Create store paysys when store created. """
    paysys_id_list = db.session.query(PaymentSystem.id).all()
    for paysys_id, in paysys_id_list:
        print('Add payment systems %s to store %s' % (paysys_id, store.id))
        sps = StorePaySys(store.id, paysys_id, allowed=False)
        db.session.add(sps)
